generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model comments {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  author_id  Int
  post_id    Int
  created_at DateTime @db.DateTime(0)
  users      users    @relation(fields: [author_id], references: [id], onDelete: Cascade, map: "comments_ibfk_1")
  posts      posts    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comments_ibfk_2")

  @@index([author_id], map: "comments_author_id_index")
  @@index([post_id], map: "comments_post_id_index")
}

model likes {
  id        Int   @id @default(autoincrement())
  author_id Int
  target_id Int
  users     users @relation(fields: [author_id], references: [id], onDelete: Cascade, map: "likes_ibfk_1")
  posts     posts @relation(fields: [target_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "likes_ibfk_2")

  @@index([author_id], map: "likes_author_id_index")
  @@index([target_id], map: "likes_target_id_index")
}

model posts {
  id             Int        @id @default(autoincrement())
  content        String     @db.Text
  author_id      Int
  created_at     DateTime   @db.DateTime(0)
  likes_count    Int?
  comments_count Int?
  img_url        Int?
  users          users      @relation(fields: [author_id], references: [id], map: "posts_ibfk_1")
  comments       comments[]
  likes          likes[]

  @@index([author_id], map: "posts_author_id_index")
}

model users {
  id        Int        @id @default(autoincrement())
  full_name String     @db.VarChar(255)
  email     String     @unique(map: "email") @db.VarChar(255)
  password  String     @db.VarChar(255)
  role      Role       @default(USER)
  img_url   String?    @db.VarChar(255)
  comments  comments[]
  likes     likes[]
  posts     posts[]
}

enum Role {
  USER
  ADMIN
}
